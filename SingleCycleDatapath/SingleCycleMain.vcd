$date
	Fri Jan 15 22:54:10 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module SingleCycleMain_tb $end
$var reg 1 ! clk $end
$var reg 32 " initialPCval [31:0] $end
$scope module instance1 $end
$var wire 3 # ALUCtrl [2:0] $end
$var wire 1 $ BranchEnabled $end
$var wire 1 ! clk $end
$var wire 32 % initialPCval [31:0] $end
$var wire 5 & writeRegWire [4:0] $end
$var wire 32 ' writeDataToReg [31:0] $end
$var wire 5 ( reg2_mux [4:0] $end
$var wire 32 ) readData2 [31:0] $end
$var wire 32 * readData1 [31:0] $end
$var wire 1 + overflow2 $end
$var wire 1 , overflow1 $end
$var wire 32 - outputFromShiftLeft [31:0] $end
$var wire 32 . outputDataSEXT [31:0] $end
$var wire 32 / outputData [31:0] $end
$var wire 32 0 nextPCvalPlusOffset [31:0] $end
$var wire 32 1 nextPCval [31:0] $end
$var wire 32 2 nextPCactual [31:0] $end
$var wire 1 3 is_jr $end
$var wire 32 4 instrWire [31:0] $end
$var wire 1 5 aluSrc $end
$var wire 1 6 ZeroOUT $end
$var wire 1 7 RegWrite $end
$var wire 2 8 RegDst [1:0] $end
$var wire 2 9 MemtoReg [1:0] $end
$var wire 1 : MemWrite $end
$var wire 1 ; MemRead $end
$var wire 1 < Branch $end
$var wire 32 = ALUout [31:0] $end
$var wire 32 > ALUSrc2 [31:0] $end
$var wire 2 ? ALUOp [1:0] $end
$var reg 32 @ PC [31:0] $end
$var reg 32 A constantFour [31:0] $end
$var reg 1 B counter $end
$var reg 32 C init_PC [31:0] $end
$var reg 32 D jumpTarget [31:0] $end
$var reg 1 E prevInstrWasJ $end
$scope module PCafterBranch $end
$var wire 1 + overflowBit $end
$var wire 32 F out [31:0] $end
$var wire 32 G input2 [31:0] $end
$var wire 32 H input1 [31:0] $end
$upscope $end
$scope module aluCoreInstance $end
$var wire 3 I ALUCtrl [2:0] $end
$var wire 32 J ALUSrc2 [31:0] $end
$var wire 32 K ALUSrc1 [31:0] $end
$var reg 32 L ALUResult [31:0] $end
$var reg 1 6 Zero $end
$upscope $end
$scope module aluSrc2MUX $end
$var wire 1 5 select $end
$var wire 32 M out [31:0] $end
$var wire 32 N input1 [31:0] $end
$var wire 32 O input0 [31:0] $end
$upscope $end
$scope module dataMem $end
$var wire 1 ; MemRead $end
$var wire 1 : MemWrite $end
$var wire 32 P inputAddress [31:0] $end
$var wire 32 Q inputData32bit [31:0] $end
$var reg 32 R outputData32bit [31:0] $end
$upscope $end
$scope module instLftShft $end
$var wire 32 S outData [31:0] $end
$var wire 32 T inData [31:0] $end
$upscope $end
$scope module instrMem $end
$var wire 32 U readAddress [31:0] $end
$var reg 32 V instruction [31:0] $end
$upscope $end
$scope module main_controller $end
$var wire 2 W ALUOp [1:0] $end
$var wire 6 X FunctField [5:0] $end
$var wire 6 Y OpCode [5:0] $end
$var reg 3 Z ALUCtrl [2:0] $end
$var reg 15 [ ctrl_signals [14:0] $end
$upscope $end
$scope module mem2regSrcMUX $end
$var wire 32 \ input0 [31:0] $end
$var wire 32 ] input1 [31:0] $end
$var wire 32 ^ input2 [31:0] $end
$var wire 32 _ input3 [31:0] $end
$var wire 2 ` select [1:0] $end
$var wire 32 a out [31:0] $end
$upscope $end
$scope module nextPCvalue $end
$var wire 32 b input1 [31:0] $end
$var wire 32 c input2 [31:0] $end
$var wire 1 , overflowBit $end
$var wire 32 d out [31:0] $end
$upscope $end
$scope module pcSrcMUX $end
$var wire 32 e input0 [31:0] $end
$var wire 32 f input1 [31:0] $end
$var wire 1 $ select $end
$var wire 32 g out [31:0] $end
$upscope $end
$scope module regDstMUX $end
$var wire 5 h input0 [4:0] $end
$var wire 5 i input1 [4:0] $end
$var wire 5 j input2 [4:0] $end
$var wire 5 k input3 [4:0] $end
$var wire 2 l select [1:0] $end
$var wire 5 m out [4:0] $end
$upscope $end
$scope module regFile $end
$var wire 1 7 RegWrite $end
$var wire 5 n readReg1 [4:0] $end
$var wire 32 o writeData [31:0] $end
$var wire 5 p writeReg [4:0] $end
$var wire 5 q readReg2 [4:0] $end
$var reg 32 r readData1 [31:0] $end
$var reg 32 s readData2 [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 t i [31:0] $end
$upscope $end
$upscope $end
$scope module regfile_sec_jr $end
$var wire 5 u input0 [4:0] $end
$var wire 5 v input1 [4:0] $end
$var wire 1 3 select $end
$var wire 5 w out [4:0] $end
$upscope $end
$scope module signExt $end
$var wire 16 x inputData [15:0] $end
$var wire 32 y outputData [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 y
b1 x
b10011 w
b11111 v
b10011 u
b100000 t
b0 s
b0 r
b10011 q
b10011 p
b1 o
b10010 n
b10011 m
b0 l
b0 k
b11111 j
b0 i
b10011 h
b100 g
b1000 f
b100 e
b100 d
b100 c
b0 b
b1 a
b0 `
bx _
bx ^
bx ]
b1 \
b10000010010010 [
b110 Z
b1101 Y
b1 X
b1 W
b110110010100110000000000000001 V
b0 U
b1 T
b100 S
bx R
b0 Q
b1 P
b0 O
b1 N
b1 M
b1 L
b0 K
b1 J
bx I
b100 H
b100 G
b1000 F
0E
bx D
bx C
0B
b100 A
b0 @
b1 ?
b1 >
b1 =
0<
0;
0:
b0 9
b0 8
17
06
15
b110110010100110000000000000001 4
03
b100 2
b100 1
b1000 0
bx /
b1 .
b100 -
0,
0+
b0 *
b0 )
b10011 (
b1 '
b10011 &
b0 %
0$
bx #
b0 "
0!
$end
#20
bx '
bx a
bx o
16
bx1x #
bx1x I
b11 9
b11 `
05
b10 8
b10 l
b11 ?
b11 W
b0 =
b0 L
b0 P
b0 \
b11111 &
b11111 m
b11111 p
b111000001110110 [
b11000 -
b11000 G
b11000 S
b0 >
b0 J
b0 M
b0 (
b0 q
b0 w
b110 X
b11 Y
b110 .
b110 N
b110 T
b110 y
b110 x
b0 n
b0 u
b0 h
b1000 2
b1000 g
b100000 0
b100000 F
b100000 f
b1100000000000000000000000110 4
b1100000000000000000000000110 V
b1000 1
b1000 H
b1000 d
b1000 e
b100 @
b100 U
b100 b
1B
1!
#40
0!
#60
b10010 &
b10010 m
b10010 p
06
b100 =
b100 L
b100 P
b100 \
b100 >
b100 J
b100 M
bx10 #
bx10 I
b0 9
b0 `
15
b0 8
b0 l
b1 ?
b1 W
b10000010010100 [
b10000 -
b10000 G
b10000 S
b10010 (
b10010 q
b10010 w
b100 X
b1000 Y
b100 .
b100 N
b100 T
b100 y
b100 x
b10011 n
b10010 u
b10010 h
b11100 2
b11100 g
b101100 0
b101100 F
b101100 f
b100 '
b100 a
b100 o
b100010011100100000000000000100 4
b100010011100100000000000000100 V
b11100 1
b11100 H
b11100 d
b11100 e
b11000 @
b11000 U
b11000 b
b11000 D
b11000 ^
1E
b1000 C
b1000 _
1!
#80
0!
#100
b1000 )
b1000 O
b1000 Q
b1000 s
b100 *
b100 K
b100 r
13
07
b1000 '
b1000 a
b1000 o
06
bx1x #
bx1x I
05
b0 8
b0 l
b10 ?
b10 W
b1000 =
b1000 L
b1000 P
b1000 \
b0 &
b0 m
b0 p
b100000000000111 [
b100000 -
b100000 G
b100000 S
b1000 >
b1000 J
b1000 M
b11111 (
b11111 q
b11111 w
b1000 X
b0 Y
b1000 .
b1000 N
b1000 T
b1000 y
b1000 x
b0 n
b0 u
b0 h
b100000 2
b100000 g
b1000000 0
b1000000 F
b1000000 f
b1000 4
b1000 V
b100000 1
b100000 H
b100000 d
b100000 e
b11100 @
b11100 U
b11100 b
0E
1!
#120
0!
#140
b100 '
b100 a
b100 o
b100 =
b100 L
b100 P
b100 \
b100 >
b100 J
b100 M
b100 )
b100 O
b100 Q
b100 s
b0 (
b0 q
b0 w
b1x #
b1x I
b10 Z
03
b0 ?
b0 W
b110 [
b0 -
b0 G
b0 S
b0 X
b10 Y
b0 .
b0 N
b0 T
b0 y
b0 x
b1100 2
b1100 g
b1100 0
b1100 F
b1100 f
b1000000000000000000000000000 4
b1000000000000000000000000000 V
b1100 1
b1100 H
b1100 d
b1100 e
b1000 @
b1000 U
b1000 b
b1000 D
b1000 ^
1E
1!
#160
0!
#180
b1 '
b1 a
b1 o
b110 Z
b1 =
b1 L
b1 P
b1 \
bx #
bx I
17
15
b1 ?
b1 W
b1 >
b1 J
b1 M
b10011 &
b10011 m
b10011 p
b10000010010010 [
b100 -
b100 G
b100 S
b1 )
b1 O
b1 Q
b1 s
b10011 (
b10011 q
b10011 w
b1 X
b1101 Y
b1 .
b1 N
b1 T
b1 y
b1 x
b10010 n
b10011 u
b10011 h
b100 2
b100 g
b1000 0
b1000 F
b1000 f
b110110010100110000000000000001 4
b110110010100110000000000000001 V
b100 1
b100 H
b100 d
b100 e
b0 @
b0 U
b0 b
b0 D
b0 ^
b1100 C
b1100 _
1!
#200
0!
#220
b1100 '
b1100 a
b1100 o
bx1x #
bx1x I
b11 9
b11 `
05
b10 8
b10 l
b11 ?
b11 W
b1 =
b1 L
b1 P
b1 \
b11111 &
b11111 m
b11111 p
b111000001110110 [
b11000 -
b11000 G
b11000 S
b1 >
b1 J
b1 M
b0 (
b0 q
b0 w
b110 X
b11 Y
b110 .
b110 N
b110 T
b110 y
b110 x
b0 n
b0 u
b0 h
b1000 2
b1000 g
b100000 0
b100000 F
b100000 f
b1100000000000000000000000110 4
b1100000000000000000000000110 V
b1000 1
b1000 H
b1000 d
b1000 e
b100 @
b100 U
b100 b
0E
1!
#240
0!
#260
b10010 &
b10010 m
b10010 p
b100 =
b100 L
b100 P
b100 \
b100 >
b100 J
b100 M
bx10 #
bx10 I
b0 9
b0 `
15
b0 8
b0 l
b1 ?
b1 W
b10000010010100 [
b10000 -
b10000 G
b10000 S
b10010 (
b10010 q
b10010 w
b100 X
b1000 Y
b100 .
b100 N
b100 T
b100 y
b100 x
b10011 n
b10010 u
b10010 h
b11100 2
b11100 g
b101100 0
b101100 F
b101100 f
b100 '
b100 a
b100 o
b100010011100100000000000000100 4
b100010011100100000000000000100 V
b11100 1
b11100 H
b11100 d
b11100 e
b11000 @
b11000 U
b11000 b
b11000 D
b11000 ^
1E
b1000 C
b1000 _
1!
#280
0!
#300
b1000 )
b1000 O
b1000 Q
b1000 s
13
07
b1000 '
b1000 a
b1000 o
bx1x #
bx1x I
05
b0 8
b0 l
b10 ?
b10 W
b1000 =
b1000 L
b1000 P
b1000 \
b0 &
b0 m
b0 p
b100000000000111 [
b100000 -
b100000 G
b100000 S
b1000 >
b1000 J
b1000 M
b11111 (
b11111 q
b11111 w
b1000 X
b0 Y
b1000 .
b1000 N
b1000 T
b1000 y
b1000 x
b0 n
b0 u
b0 h
b100000 2
b100000 g
b1000000 0
b1000000 F
b1000000 f
b1000 4
b1000 V
b100000 1
b100000 H
b100000 d
b100000 e
b11100 @
b11100 U
b11100 b
0E
1!
#320
0!
#340
b100 '
b100 a
b100 o
b100 =
b100 L
b100 P
b100 \
b100 >
b100 J
b100 M
b100 )
b100 O
b100 Q
b100 s
b0 (
b0 q
b0 w
b1x #
b1x I
b10 Z
03
b0 ?
b0 W
b110 [
b0 -
b0 G
b0 S
b0 X
b10 Y
b0 .
b0 N
b0 T
b0 y
b0 x
b1100 2
b1100 g
b1100 0
b1100 F
b1100 f
b1000000000000000000000000000 4
b1000000000000000000000000000 V
b1100 1
b1100 H
b1100 d
b1100 e
b1000 @
b1000 U
b1000 b
b1000 D
b1000 ^
1E
1!
#360
0!
#380
b1 '
b1 a
b1 o
b110 Z
b1 =
b1 L
b1 P
b1 \
bx #
bx I
17
15
b1 ?
b1 W
b1 >
b1 J
b1 M
b10011 &
b10011 m
b10011 p
b10000010010010 [
b100 -
b100 G
b100 S
b1 )
b1 O
b1 Q
b1 s
b10011 (
b10011 q
b10011 w
b1 X
b1101 Y
b1 .
b1 N
b1 T
b1 y
b1 x
b10010 n
b10011 u
b10011 h
b100 2
b100 g
b1000 0
b1000 F
b1000 f
b110110010100110000000000000001 4
b110110010100110000000000000001 V
b100 1
b100 H
b100 d
b100 e
b0 @
b0 U
b0 b
b0 D
b0 ^
b1100 C
b1100 _
1!
#400
0!
